
DigitalReadSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001475  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093c  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077b  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000889  00000000  00000000  00003753  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ad 30       	cpi	r26, 0x0D	; 13
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  d8:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <setup>:
int aciona2();
void aciona1();

void setup(){
	
	pinMode (ALARME, SAIDA);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pinMode>
	pinMode (PORTA_INTERNA, SAIDA);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pinMode>
	pinMode (10, SAIDA);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pinMode>
	pinMode (11, SAIDA);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pinMode>
	pinMode (12, SAIDA);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <pinMode>

00000108 <_Z7aciona1v>:
	x = aciona2();
//	delay (500);
}

void aciona1(){
	digitalWrite(PORTA_RUA,DESLIGADO);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(PORTA_INTERNA,LIGADO);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(SEGURO,DESLIGADO);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(ATENCAO,LIGADO);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(ALARME,DESLIGADO);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	0c 94 b9 01 	jmp	0x372	; 0x372 <digitalWrite>

00000130 <_Z7aciona2v>:
}

int aciona2(){
	digitalWrite(PORTA_RUA,LIGADO);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(PORTA_INTERNA,DESLIGADO);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(SEGURO,LIGADO);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(ATENCAO,DESLIGADO);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	89 e0       	ldi	r24, 0x09	; 9
 14c:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	digitalWrite(ALARME,LIGADO);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	0e 94 b9 01 	call	0x372	; 0x372 <digitalWrite>
	a++;
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <a>
 15c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <a+0x1>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <a+0x1>
 166:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <a>
	return a;
}
 16a:	08 95       	ret

0000016c <loop>:

	
}

void loop(){
	aciona1();
 16c:	0e 94 84 00 	call	0x108	; 0x108 <_Z7aciona1v>
//	delay (500);
	x = aciona2();
 170:	0e 94 98 00 	call	0x130	; 0x130 <_Z7aciona2v>
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 17c:	08 95       	ret

0000017e <initVariant>:
 17e:	08 95       	ret

00000180 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 180:	0e 94 19 01 	call	0x232	; 0x232 <init>

	initVariant();
 184:	0e 94 bf 00 	call	0x17e	; 0x17e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 188:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 190:	0e 94 b6 00 	call	0x16c	; 0x16c <loop>
		if (serialEventRun) serialEventRun();
 194:	20 97       	sbiw	r28, 0x00	; 0
 196:	e1 f3       	breq	.-8      	; 0x190 <main+0x10>
 198:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 19c:	f9 cf       	rjmp	.-14     	; 0x190 <main+0x10>

0000019e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_millis>
 1b8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_millis+0x1>
 1bc:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_millis+0x2>
 1c0:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_millis+0x3>
 1c4:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0_fract>
 1c8:	23 e0       	ldi	r18, 0x03	; 3
 1ca:	23 0f       	add	r18, r19
 1cc:	2d 37       	cpi	r18, 0x7D	; 125
 1ce:	20 f4       	brcc	.+8      	; 0x1d8 <__vector_16+0x3a>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	a1 1d       	adc	r26, r1
 1d4:	b1 1d       	adc	r27, r1
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <__vector_16+0x44>
 1d8:	26 e8       	ldi	r18, 0x86	; 134
 1da:	23 0f       	add	r18, r19
 1dc:	02 96       	adiw	r24, 0x02	; 2
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <timer0_fract>
 1e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_millis>
 1ea:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_millis+0x1>
 1ee:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_millis+0x2>
 1f2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_millis+0x3>
 1f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_overflow_count>
 1fa:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_overflow_count+0x1>
 1fe:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_overflow_count+0x2>
 202:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_overflow_count+0x3>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	a1 1d       	adc	r26, r1
 20a:	b1 1d       	adc	r27, r1
 20c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_overflow_count>
 210:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_overflow_count+0x1>
 214:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_overflow_count+0x2>
 218:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_overflow_count+0x3>
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 232:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 234:	84 b5       	in	r24, 0x24	; 36
 236:	82 60       	ori	r24, 0x02	; 2
 238:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 23a:	84 b5       	in	r24, 0x24	; 36
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 240:	85 b5       	in	r24, 0x25	; 37
 242:	82 60       	ori	r24, 0x02	; 2
 244:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 246:	85 b5       	in	r24, 0x25	; 37
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 24c:	ee e6       	ldi	r30, 0x6E	; 110
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	81 60       	ori	r24, 0x01	; 1
 254:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 256:	e1 e8       	ldi	r30, 0x81	; 129
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 268:	e0 e8       	ldi	r30, 0x80	; 128
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 272:	e1 eb       	ldi	r30, 0xB1	; 177
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 27c:	e0 eb       	ldi	r30, 0xB0	; 176
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	81 60       	ori	r24, 0x01	; 1
 284:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 286:	ea e7       	ldi	r30, 0x7A	; 122
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	84 60       	ori	r24, 0x04	; 4
 28e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 290:	80 81       	ld	r24, Z
 292:	82 60       	ori	r24, 0x02	; 2
 294:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 296:	80 81       	ld	r24, Z
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 29c:	80 81       	ld	r24, Z
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 2a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 2a6:	08 95       	ret

000002a8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	81 f0       	breq	.+32     	; 0x2cc <turnOffPWM+0x24>
 2ac:	28 f4       	brcc	.+10     	; 0x2b8 <turnOffPWM+0x10>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	99 f0       	breq	.+38     	; 0x2d8 <turnOffPWM+0x30>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	a1 f0       	breq	.+40     	; 0x2de <turnOffPWM+0x36>
 2b6:	08 95       	ret
 2b8:	87 30       	cpi	r24, 0x07	; 7
 2ba:	a9 f0       	breq	.+42     	; 0x2e6 <turnOffPWM+0x3e>
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	b9 f0       	breq	.+46     	; 0x2ee <turnOffPWM+0x46>
 2c0:	84 30       	cpi	r24, 0x04	; 4
 2c2:	d1 f4       	brne	.+52     	; 0x2f8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 2c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 2c8:	8f 7d       	andi	r24, 0xDF	; 223
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 2cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 2d0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 2d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 2d6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 2d8:	84 b5       	in	r24, 0x24	; 36
 2da:	8f 77       	andi	r24, 0x7F	; 127
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 2de:	84 b5       	in	r24, 0x24	; 36
 2e0:	8f 7d       	andi	r24, 0xDF	; 223
 2e2:	84 bd       	out	0x24, r24	; 36
 2e4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 2e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 2ea:	8f 77       	andi	r24, 0x7F	; 127
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 2ee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 2f2:	8f 7d       	andi	r24, 0xDF	; 223
 2f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 2f8:	08 95       	ret

000002fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	e4 58       	subi	r30, 0x84	; 132
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 308:	fc 01       	movw	r30, r24
 30a:	e0 57       	subi	r30, 0x70	; 112
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 310:	88 23       	and	r24, r24
 312:	61 f1       	breq	.+88     	; 0x36c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	fc 01       	movw	r30, r24
 31c:	e2 55       	subi	r30, 0x52	; 82
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	c5 91       	lpm	r28, Z+
 322:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 324:	fc 01       	movw	r30, r24
 326:	ec 55       	subi	r30, 0x5C	; 92
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	a5 91       	lpm	r26, Z+
 32c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 32e:	61 11       	cpse	r22, r1
 330:	09 c0       	rjmp	.+18     	; 0x344 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 332:	9f b7       	in	r25, 0x3f	; 63
                cli();
 334:	f8 94       	cli
		*reg &= ~bit;
 336:	88 81       	ld	r24, Y
 338:	20 95       	com	r18
 33a:	82 23       	and	r24, r18
 33c:	88 83       	st	Y, r24
		*out &= ~bit;
 33e:	ec 91       	ld	r30, X
 340:	2e 23       	and	r18, r30
 342:	0b c0       	rjmp	.+22     	; 0x35a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 344:	62 30       	cpi	r22, 0x02	; 2
 346:	61 f4       	brne	.+24     	; 0x360 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 348:	9f b7       	in	r25, 0x3f	; 63
                cli();
 34a:	f8 94       	cli
		*reg &= ~bit;
 34c:	88 81       	ld	r24, Y
 34e:	32 2f       	mov	r19, r18
 350:	30 95       	com	r19
 352:	83 23       	and	r24, r19
 354:	88 83       	st	Y, r24
		*out |= bit;
 356:	ec 91       	ld	r30, X
 358:	2e 2b       	or	r18, r30
 35a:	2c 93       	st	X, r18
		SREG = oldSREG;
 35c:	9f bf       	out	0x3f, r25	; 63
 35e:	06 c0       	rjmp	.+12     	; 0x36c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 360:	8f b7       	in	r24, 0x3f	; 63
                cli();
 362:	f8 94       	cli
		*reg |= bit;
 364:	e8 81       	ld	r30, Y
 366:	2e 2b       	or	r18, r30
 368:	28 83       	st	Y, r18
		SREG = oldSREG;
 36a:	8f bf       	out	0x3f, r24	; 63
	}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	f9 01       	movw	r30, r18
 37e:	e8 59       	subi	r30, 0x98	; 152
 380:	ff 4f       	sbci	r31, 0xFF	; 255
 382:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 384:	f9 01       	movw	r30, r18
 386:	e4 58       	subi	r30, 0x84	; 132
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 38c:	f9 01       	movw	r30, r18
 38e:	e0 57       	subi	r30, 0x70	; 112
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 394:	cc 23       	and	r28, r28
 396:	c1 f0       	breq	.+48     	; 0x3c8 <digitalWrite+0x56>
 398:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 39a:	81 11       	cpse	r24, r1
 39c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <turnOffPWM>

	out = portOutputRegister(port);
 3a0:	ec 2f       	mov	r30, r28
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	ec 55       	subi	r30, 0x5C	; 92
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	a5 91       	lpm	r26, Z+
 3ae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 3b0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 3b2:	f8 94       	cli

	if (val == LOW) {
 3b4:	11 11       	cpse	r17, r1
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <digitalWrite+0x4e>
		*out &= ~bit;
 3b8:	8c 91       	ld	r24, X
 3ba:	d0 95       	com	r29
 3bc:	d8 23       	and	r29, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <digitalWrite+0x52>
	} else {
		*out |= bit;
 3c0:	ec 91       	ld	r30, X
 3c2:	de 2b       	or	r29, r30
 3c4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 3c6:	9f bf       	out	0x3f, r25	; 63
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
